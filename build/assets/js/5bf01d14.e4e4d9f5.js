"use strict";(self.webpackChunkweb_site=self.webpackChunkweb_site||[]).push([[2296],{8474:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=i(4848),t=i(8453);const o={sidebar_label:"Implementations in Different Programming Language",sidebar_position:4},a="Implementation in Different Programming Language",s={id:"Tutorials/Languages_Examples",title:"Implementation in Different Programming Language",description:"In this tutorial, you will see various implementations of MotionLight using different programming languages. The goal is to provide dynamic examples of how to work with the `motion.light` files, showcasing the versatility of MotionLight across different coding environments.",source:"@site/docs/Tutorials/Languages_Examples.md",sourceDirName:"Tutorials",slug:"/Tutorials/Languages_Examples",permalink:"/MotionLight/docs/Tutorials/Languages_Examples",draft:!1,unlisted:!1,editUrl:"https://github.com/HectorAlonso18/MotionLight/docs/Tutorials/Languages_Examples.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Implementations in Different Programming Language",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"General Implementation",permalink:"/MotionLight/docs/Tutorials/General_Implementation"}},l={},c=[{value:"C++",id:"c",level:2},{value:"With a function",id:"with-a-function",level:3},{value:"Using struct/class",id:"using-structclass",level:3},{value:"Java",id:"java",level:2},{value:"Python",id:"python",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"implementation-in-different-programming-language",children:"Implementation in Different Programming Language"})}),"\n",(0,r.jsxs)(n.p,{children:["In this tutorial, you will see various implementations of MotionLight using different programming languages. The goal is to provide dynamic examples of how to work with the ",(0,r.jsx)(n.code,{children:"motion.light"})," files, showcasing the versatility of MotionLight across different coding environments."]}),"\n",(0,r.jsxs)(n.p,{children:["For more information about the ",(0,r.jsx)(n.code,{children:"motion.light"})," files click ",(0,r.jsx)(n.a,{href:"/MotionLight/docs/Tutorials/How_to_use_motion_light#the-motionlight-file",children:"here"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"c",children:"C++"}),"\n",(0,r.jsx)(n.h3,{id:"with-a-function",children:"With a function"}),"\n",(0,r.jsxs)(n.p,{children:["The first approach in ",(0,r.jsx)(n.code,{children:"C++"})," involves creating a function that returns a velocity vector from the ",(0,r.jsx)(n.code,{children:"motion.light"})," file and stores it in a new vector. This function allows for easy access to the velocity data for further processing or simulation. Below is a basic implementation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n#include <vector>\r\n\r\nstd::vector<float> get_motion_light_vector(const char* motion_file_name) {\r\n    std::ifstream motion_file(motion_file_name); \r\n    if (!motion_file.is_open()) {\r\n        std::cerr << "Error opening the file" << "\\n";\r\n        std::cerr << "Are you sure that the file is on your project?" << "\\n";\r\n        return { 0 };\r\n    }\r\n\r\n    std::string line; \r\n    std::vector<float> velocities; \r\n    int index = 0; \r\n\r\n    while (std::getline(motion_file, line, \'\\n\')) {\r\n        //Ignoring the first line\r\n        if (index > 0) {\r\n            velocities.push_back(std::stod(line));\r\n        }\r\n        index++;\r\n    }\r\n\r\n    return velocities; \r\n}\r\n\r\nint main(){\r\n    std::vector<float> my_velocities = get_motion_light_vector("motion.light.txt"); \r\n\r\n    for (int i = 0; i < my_velocities.size(); i++) {\r\n        std::cout << "Vel [" << i << "]: " << my_velocities[i]<<"\\n";\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-structclass",children:"Using struct/class"}),"\n",(0,r.jsxs)(n.p,{children:["This other example is using a struct to interact with the ",(0,r.jsx)(n.code,{children:"motion.light"})," files and store the information in variables.\r\nIn this example, we are reading the first line of the file to take the motion profile parameters."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title= "main.cpp"',children:'#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n#include <vector>\r\n\r\n\r\nenum LinearProfiler {\r\n    TRAPEZOIDAL,\r\n    SCURVE\r\n};\r\n\r\nstruct Profile {\r\n    LinearProfiler profiler_type=TRAPEZOIDAL; \r\n    float MaxVelocity=0; \r\n    float MaxAcceleration=0; \r\n    float MaxDesacceleration=0; \r\n    float MaxJerk=0; \r\n    float TargetDistance=0; \r\n    float SampleTimeSec=0; \r\n    std::vector<float> Velocities; \r\n\r\n    void ReadMotionLightFile(const char* motion_file_name) {\r\n        std::ifstream motion_file(motion_file_name);\r\n        if (!motion_file.is_open()) {\r\n            std::cerr << "Error opening the file" << "\\n";\r\n            std::cerr << "Are you sure that the file is on your project?" << "\\n";\r\n        }\r\n\r\n        std::string line;\r\n        std::vector<float> file_velocities;\r\n        std::vector<float> parameters; \r\n \r\n\r\n        for (int i = 0; i<6; i++) {\r\n            std::getline(motion_file, line, \',\');\r\n            parameters.push_back(std::stod(line));\r\n        }\r\n\r\n        std::getline(motion_file, line); \r\n        parameters.push_back(std::stod(line));\r\n        \r\n        \r\n        while (std::getline(motion_file, line, \'\\n\')) {\r\n            file_velocities.push_back(std::stod(line));\r\n        }\r\n\r\n        profiler_type = static_cast<LinearProfiler>(parameters[0]); \r\n        MaxVelocity = parameters[1];\r\n        MaxAcceleration = parameters[2];\r\n        MaxDesacceleration = parameters[3];\r\n        MaxJerk = parameters[4];\r\n        TargetDistance = parameters[5];\r\n        SampleTimeSec = parameters[6];\r\n        this->Velocities = file_velocities; \r\n\r\n    }\r\n\r\n}; \r\n\r\nint main(){\r\n    //Creating the object\r\n    Profile my_profiler;\r\n\r\n    my_profiler.ReadMotionLightFile("motion.light.txt"); \r\n\r\n    \r\n    std::cout << "\\nProfiler type: " << my_profiler.profiler_type; \r\n    std::cout << "\\nMax Velocity: " << my_profiler.MaxVelocity; \r\n    std::cout << "\\nMax Acceleration: " << my_profiler.MaxAcceleration;\r\n    std::cout << "\\nMax Desacceleration: " << my_profiler.MaxDesacceleration;\r\n    std::cout << "\\nMax Jerk: " << my_profiler.MaxJerk;\r\n    std::cout << "\\nDistance: " << my_profiler.TargetDistance; \r\n    std::cout << "\\n Sample time: " << my_profiler.SampleTimeSec; \r\n    \r\n \r\n    for (int i = 0; i < my_profiler.Velocities.size(); i++) {\r\n        std::cout <<"\\n Vel [" << i << "]: " << my_profiler.Velocities[i];\r\n    }\r\n\r\n    return 0; \r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"java",children:"Java"}),"\n",(0,r.jsx)(n.p,{children:"The first approach in Java involves creating a method that returns a velocity vector from the motion.light file and stores it in a new list. This method allows for easy access to the velocity data for further processing or simulation. Below is a basic implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n    public static List<Float> getMotionLightVector(String motionFileName) {\r\n        List<Float> velocities = new ArrayList<>();\r\n\r\n        try (BufferedReader br = new BufferedReader(new FileReader(motionFileName))) {\r\n            String line;\r\n            int index = 0;\r\n\r\n            while ((line = br.readLine()) != null) {\r\n                // Ignoring the first line\r\n                if (index > 0) {\r\n                    velocities.add(Float.parseFloat(line));\r\n                }\r\n                index++;\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println("Error opening the file");\r\n            System.err.println("Are you sure that the file is in your project?");\r\n            return new ArrayList<>();\r\n        }\r\n\r\n        return velocities;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<Float> myVelocities = getMotionLightVector("motion.light.txt");\r\n\r\n        for (int i = 0; i < myVelocities.size(); i++) {\r\n            System.out.println("Vel [" + i + "]: " + myVelocities.get(i));\r\n        }\r\n    }\r\n}\r\n\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"Python"})," we can create a list to store the velocities from ",(0,r.jsx)(n.code,{children:"motion.light"})," files."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def get_motion_light_vector(motion_file_name):\r\n    velocities = []\r\n    \r\n    try:\r\n        with open(motion_file_name, \'r\') as motion_file:\r\n            for index, line in enumerate(motion_file):\r\n                # Ignoring the first line\r\n                if index > 0:\r\n                    velocities.append(float(line.strip()))\r\n    except IOError:\r\n        print("Error opening the file")\r\n        print("Are you sure that the file is in your project?")\r\n        return [0]\r\n\r\n    return velocities\r\n\r\n\r\nmy_velocities = get_motion_light_vector("motion.light.txt")\r\n\r\nfor velocity in my_velocities: \r\n    print(velocity)\r\n\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var r=i(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);